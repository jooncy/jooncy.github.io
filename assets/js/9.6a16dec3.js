(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{224:function(t,e,s){"use strict";s.r(e);var r=s(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("Docker Hub"),s("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),s("OutboundLink")],1),t._v(", 是由Docker公司负责维护的公告注册中心，包含大量的容器镜像，Docker 工具默认从这个公告镜像库下载镜像。\n该网站在国外运营，国内访问下载是很慢的...")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("这是一个干净的Ubuntu镜像，多个只读层，它们重叠在一起。除了最下面一层，其它层都会有一个指针指向下一层。这些层是Docker内部的实现细节，并且能够 在主机（译者注：运行Docker的机器）的文件系统上访问到。统一文件系统（union file system）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。")]),t._v(" "),t._m(17),t._v(" "),s("p",[t._v("容器 = 镜像 + 可读写层\n比如在这个Ubuntu这个系统上加一层nginx，只能在上面继续叠加，这些工作其实都是由cow，写字库下的机制来实现的。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),s("p",[t._v("启动一个 nginx 容器")]),t._v(" "),t._m(24),t._m(25),t._v(" "),s("p",[t._v("Docker提供三种不同的方式将数据从宿主机挂载到容器中")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),s("h3",{attrs:{id:"volumes-挂载-官方文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volumes-挂载-官方文档","aria-hidden":"true"}},[t._v("#")]),t._v(" Volumes 挂载 - "),s("a",{attrs:{href:"https://docs.docker.com/engine/admin/volumes/bind-mounts/#start-a-container-with-a-bind-mount",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1)]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),s("p",[t._v("适合挂载日志")]),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"镜像管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像管理","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像管理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"镜像是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像是什么","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像是什么")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("镜像介绍")]),t._v(" "),s("p",[t._v("镜像不是一个单一的文件，而是有多层构成。可以通过docker history "),s("code",[t._v("id/image name")]),t._v(" 查看镜像中各分层内容及大小，每层对应着Dockerfile的一条指令。Docker 镜像默认存储在 "),s("code",[t._v("/var/lib/docker/\\<storage-driver>\\")]),t._v("中。")]),t._v(" "),s("p",[t._v("docker 共享主机的bootfs（即内核），根据不同操作系统生成自己的文件系统（Ubuntu，Centos）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("一个分层存储的文件")]),t._v(" "),s("li",[t._v("一个软件的环境")]),t._v(" "),s("li",[t._v("一个镜像可以创建N个容器")]),t._v(" "),s("li",[t._v("一个标准化的交付")]),t._v(" "),s("li",[t._v("一个不包含Linux 内核而又精简的Linux操作系统")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"如图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如图","aria-hidden":"true"}},[this._v("#")]),this._v(" 如图")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/devops/docker/1557380831271.png",alt:"1557380831271"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"镜像从哪里来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像从哪里来","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像从哪里来")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ ping hub.docker.com\nPING us-east-1-elbdefau-1nlhaqqbnj2z8-140214243.us-east-1.elb.amazonaws.com (52.205.36.130) 56(84) bytes of data.           \n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("例子-1")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("使用命令查询镜像（镜像源来自docker hub 官网）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker search image name\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"镜像管理与联系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像管理与联系","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像管理与联系")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("联系")]),this._v(" "),e("p",[this._v("容器其实是在镜像的最上面加了一层读写层，在运行容器里文件改动时，会先从镜像里要写的文件复制到容器自己的文件系统中。如果容器删除了，最上面的读写层也就删除了，改动也就丢失了。所以无论多少容器共享一个镜像，所做的写操作都是从镜像的文件系统中农复制过来操作的，并不会修改镜像的源文件，这种方式提高磁盘利用率。")]),this._v(" "),e("p",[this._v("若想持久化这些改动，可以通过"),e("code",[this._v("docker commit images name")]),this._v("将容器保存成一个新镜像。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"docker-分层概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-分层概念","aria-hidden":"true"}},[this._v("#")]),this._v(" docker 分层概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1557397388825&di=31bb0b336bfcda537f19d22d3bb61732&imgtype=0&src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F4130274-c41fe0729d5d03f2.png%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F1%2Fw%2F300%2Fh%2F240",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"例-1：分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例-1：分层","aria-hidden":"true"}},[this._v("#")]),this._v(" 例-1：分层")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/devops/docker/1558595978676.png",alt:"1558595978676"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/devops/docker/1558596005857.png",alt:"1558596005857"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"管理镜像常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理镜像常用命令","aria-hidden":"true"}},[this._v("#")]),this._v(" 管理镜像常用命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"命令学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令学习","aria-hidden":"true"}},[this._v("#")]),this._v(" 命令学习")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("docker --help")]),this._v("，查看命令帮助")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ docker --help\n\ndocker build -t friendlyhello .             # 使用这个dockerfile文件创建一个容器\ndocker run -p 4000:80 friendlyhello         # 启动这个镜像，并为其映射端口\ndocker run -d -p 4000:80 friendlyhello      # -d 选项，默认开启 daemon 模式\ndocker container ls                         # 列出正在运行的容器\ndocker container ls -a                      # 列出所有容器\ndocker container stop <hash>                # 停止某个正在运行的容器\ndocker container kill <hash>                # 通过kill pid 的方式，停止某个正在运行的容器\ndocker container rm <hash>                  # 删除某个正在运行的容器\ndocker container rm $(docker container ls -a -q)  # 删除所有容器\ndocker image ls -a                          # 查看所有镜像\ndocker image rm <image id>                  # 删除指定镜像\ndocker image rm $(docker image ls -a -q)    # 删除所有镜像\ndocker login                                # 登录docker 镜像仓库\ndocker tag <image> username/repository:tag  # 给镜像打tag\ndocker push username/repository:tag         # 上传镜像到镜像仓库\ndocker run username/repository:tag          # 启动这个镜像\n...\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"例-1："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例-1：","aria-hidden":"true"}},[this._v("#")]),this._v(" 例-1：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('$ docker pull nginx\n$ docker run -d --name nginx-dep -p 80:80 nginx\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n3ce9b5dbdfa4        nginx               "nginx -g \'daemon of…"   3 minutes ago       Up 3 minutes        0.0.0.0:80->80/tcp   nginx-dep\n')])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br"),e("span",{staticClass:"line-number"},[this._v("4")]),e("br"),e("span",{staticClass:"line-number"},[this._v("5")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"管理应用程序数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理应用程序数据","aria-hidden":"true"}},[this._v("#")]),this._v(" 管理应用程序数据")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("volumes：Docker管理宿主机文件系统的一部分（/var/lib/docker/volumes）。")]),this._v(" "),e("li",[this._v("bind mounts：可以存储在宿主机系统的任意位置。")]),this._v(" "),e("li",[this._v("tmpfs：挂载存储在宿主机系统的内存中，而不会写入宿主机的文件系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://docs.docker.com/storage/images/types-of-mounts-bind.png",alt:'ç"å®Dockerä¸"æºä¸çæè½½'}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"管理卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理卷","aria-hidden":"true"}},[this._v("#")]),this._v(" 管理卷")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用docker命令创建的磁盘卷默认存储在"),e("code",[this._v("/var/lib/docker/volumes")]),this._v("目录下")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker volume create nginx-vol\n$ docker volume ls\n$ docker volume inspect nginx-vol\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"用卷创建一个容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用卷创建一个容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 用卷创建一个容器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("利用事先创建好的"),e("code",[this._v("docker volume")]),this._v("并将其挂在nginx容器中的指定"),e("code",[this._v("index")]),this._v("目录，这样修改volume中的数据，nginx显示也会随之改变")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker run -dp 80:80 -it --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx\n$ docker run -dp 80:80 -it --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证","aria-hidden":"true"}},[this._v("#")]),this._v(" 验证")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker inspect nginx-test   //该命令可查看具体的挂载详情\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("例-1：修改nginx index")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ vim /var/lib/docker/volumes/nginx-vol/_data/index.html \nDocker Volume\n$ curl -s 192.168.0.5\nDocker Volume\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br"),e("span",{staticClass:"line-number"},[this._v("4")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"清理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清理","aria-hidden":"true"}},[this._v("#")]),this._v(" 清理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker stop nginx-test\n$ docker rm nginx-test \n$ docker volume rm nginx-vol\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"bind-mounts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind-mounts","aria-hidden":"true"}},[this._v("#")]),this._v(" Bind Mounts")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker run -dp 80:80 -it --name=nginx01 --mount type=bind,src=/mnt/,dst=/usr/share/nginx/html nginx\n$  docker run -d -it --name=nginx01 -v /mnt:/usr/share/nginx/html nginx\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("验证绑定：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$docker inspect nginx01\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"进入镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进入镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 进入镜像")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker exec -it nginx01 bash\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("清理：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ docker container stop nginx01\n$ docker container rm nginx01\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"danger custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("bind mounts 注意：")]),this._v(" "),e("p",[this._v("1.如果源文件/目录没有存在，不会自动创建，会抛出一个错误。")]),this._v(" "),e("p",[this._v("2.如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"danger custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("Bind Mounts特点：")]),t._v(" "),s("ul",[s("li",[t._v("从主机共享配置文件到容器。默认情况下，挂载主机"),s("code",[t._v("/etc/resolv.conf")]),t._v("到每个容器，提供DNS解析。")]),t._v(" "),s("li",[t._v("在Docker主机上的开发环境和容器之间共享源代码。例如，可以将Maven target目录挂载到容器中，每次在Docker主机\n上构建Maven项目时，容器都可以访问构建的项目包。")]),t._v(" "),s("li",[t._v("当Docker主机的文件或目录结构保证与容器所需的绑定挂载一致时")])]),t._v(" "),s("h4",{attrs:{id:"volume-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume-特点","aria-hidden":"true"}},[t._v("#")]),t._v(" Volume 特点")]),t._v(" "),s("ul",[s("li",[t._v("多个运行容器之间共享数据。")]),t._v(" "),s("li",[t._v("当容器停止或被移除时，该卷依然存在。")]),t._v(" "),s("li",[t._v("多个容器可以同时挂载相同的卷。")]),t._v(" "),s("li",[t._v("当明确删除卷时，卷才会被删除。")]),t._v(" "),s("li",[t._v("将容器的数据存储在远程主机或其他存储上")]),t._v(" "),s("li",[t._v("将数据从一台Docker主机迁移到另一台时，先停止容器，然后备份卷的目录（/var/lib/docker/volumes/）")])])])}],!1,null,null,null);e.default=n.exports}}]);